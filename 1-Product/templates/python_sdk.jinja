# __init__.py
__version__ = "0.1.0"

# API Client
class ApiClient:
    def __init__(self, base_url):
        self.base_url = base_url

    def call_api(self, path, method, params=None):
        url = f"{self.base_url}{path}"
        headers = {"Content-Type": "application/json"}  # Adjust as needed

        if method == "GET":
            response = requests.get(url, params=params, headers=headers)
        elif method == "POST":
            response = requests.post(url, json=params, headers=headers)
        elif method == "PUT":
            response = requests.put(url, json=params, headers=headers)
        elif method == "DELETE":
            response = requests.delete(url, headers=headers)
        else:
            raise ValueError(f"Unsupported HTTP method: {method}")

        response.raise_for_status()  # Raise HTTPError for bad responses (4xx or 5xx)

        # Handle response based on content type (add more as needed)
        if response.headers["Content-Type"] == "application/json":
            return response.json()
        else:
            return response.text()

# API Endpoints
{% for path, methods in spec.paths.items() %}
    {% for method, details in methods.items() %}
        {% if method.lower() != 'parameters' %}
            {% set operation_id = details.operationId %}
            {% set class_name = operation_id.replace("_", " ").title().replace(" ", "") %}

class {{ class_name }}:
    def __init__(self, api_client):
        self.api_client = api_client

    def {{ operation_id }}(self, params=None):
        """
        {{ details.summary if details.summary else "No summary provided" }}

        {% if details.description %}
        {{ details.description }}
        {% endif %}
        """
        return self.api_client.call_api("{{ path }}", "{{ method.upper() }}", params)

        {% endif %}
    {% endfor %}
{% endfor %}